{{if .Values.nginx.enabled}}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{.Values.ingresses.name}}
  namespace:  {{.Values.ingresses.namespace}}
  annotations:
    kubernetes.io/ingress.class: {{.Values.ingresses.ingressClassName}}
    {{if .Values.gke.enabled}}
    # This tells Google Cloud to create an External Load Balancer to realize this Ingress
    kubernetes.io/ingress.class: {{.Values.gke.ingress.class}}
    # This enables HTTP connections from Internet clients
    kubernetes.io/ingress.allow-http: "true"
    # This tells Google Cloud to associate the External Load Balancer with the static IP which we created earlier
    kubernetes.io/ingress.global-static-ip-name: {{.Values.gke.ingress.staticIP}}
    {{end}}
    # Ingress using Cert Manager Let's Encrypt
    {{if .Values.certmanager.ingressTLS.enabled}}
    cert-manager.io/issuer: {{ .Values.certmanager.ingressTLS.issuer.name }}
    {{end}}
spec:
  {{if .Values.certmanager.ingressTLS.enabled}}
  tls:
  - secretName: {{ .Values.certmanager.ingressTLS.name }}
    hosts:
      {{if .Values.certmanager.ingressTLS.hosts}}
      {{range $i, $host := .Values.certmanager.ingressTLS.hosts}}
      - {{$host}}
      {{end}}
      {{end}}
  {{else if .Values.ingresses.tls.enabled}}
  tls:
  - hosts: 
      {{if .Values.ingresses.tls.hosts}}
      {{range $i, $host := .Values.ingresses.tls.hosts}}
      - {{$host}}
      {{end}}
      {{end}}
    secretName: {{.Values.ingresses.tls.secretName}}
  {{end}}
  rules:
  {{if .Values.ingresses.rules}}
  {{range $i, $rule := .Values.ingresses.rules}}
  - host: {{$rule.host}}
    http:
      {{ if $rule.services}}
      paths:
        {{range $j, $service := $rule.services}}
        - path: {{$service.path}}
          pathType: Prefix
          backend:
            service:
              name: {{$service.name}}
              port:
                number: {{$service.port}}
        {{end}}
      {{end}}
  {{end}}
  {{end}}
{{end}}